"use strict";
// sdk-triggerx/src/api/getJobDataById.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJobDataById = void 0;
const errors_1 = require("../utils/errors");
const getJobDataById = async (client, jobId) => {
    // Validate inputs
    if (!jobId || typeof jobId !== 'string') {
        return (0, errors_1.createErrorResponse)(new errors_1.ValidationError('jobId', 'Job ID is required and must be a string'), 'Validation error');
    }
    const apiKey = client.getApiKey();
    if (!apiKey) {
        return (0, errors_1.createErrorResponse)(new errors_1.AuthenticationError('API key is required but not provided'), 'Authentication error');
    }
    try {
        // First, fetch the job data
        const jobResponse = await client.get(`/api/jobs/${jobId}`, {
            headers: {
                'Content-Type': 'application/json',
                'X-API-KEY': apiKey,
            },
        });
        // Then, fetch the task data (logs) for this job
        const taskResponse = await client.get(`/api/tasks/job/${jobId}`, {
            headers: {
                'Content-Type': 'application/json',
                'X-API-KEY': apiKey,
            },
        });
        // Combine both responses
        const combinedResponse = {
            jobData: jobResponse,
            taskData: taskResponse
        };
        return { success: true, data: combinedResponse };
    }
    catch (error) {
        console.error('Error fetching job data and task data by ID:', error);
        const httpStatusCode = (0, errors_1.extractHttpStatusCode)(error);
        const errorCode = (0, errors_1.determineErrorCode)(error, httpStatusCode);
        if (error instanceof Error) {
            if (error.message.includes('network') || error.message.includes('timeout')) {
                return (0, errors_1.createErrorResponse)(new errors_1.NetworkError('Network error while fetching job data', { originalError: error, jobId }, httpStatusCode), 'Network error');
            }
            else if (error.message.includes('404') || error.message.includes('not found')) {
                return (0, errors_1.createErrorResponse)(new errors_1.ValidationError('jobId', 'Job not found', { originalError: error, jobId }, 404), 'Validation error');
            }
            else if (error.message.includes('401') || error.message.includes('unauthorized')) {
                return (0, errors_1.createErrorResponse)(new errors_1.AuthenticationError('Unauthorized access to job data', { originalError: error, jobId }, 401), 'Authentication error');
            }
            else if (error.message.includes('API') || error.message.includes('response')) {
                return (0, errors_1.createErrorResponse)(new errors_1.ApiError('API error while fetching job data', { originalError: error, jobId }, httpStatusCode), 'API error');
            }
        }
        return (0, errors_1.createErrorResponse)(error, 'Failed to fetch job data');
    }
};
exports.getJobDataById = getJobDataById;
