"use strict";
// sdk-triggerx/src/api/getUserData.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserData = void 0;
const errors_1 = require("../utils/errors");
const getUserData = async (client, address) => {
    // Validate inputs
    if (!address || typeof address !== 'string') {
        return (0, errors_1.createErrorResponse)(new errors_1.ValidationError('address', 'User address is required and must be a string'), 'Validation error');
    }
    const apiKey = client.getApiKey();
    if (!apiKey) {
        return (0, errors_1.createErrorResponse)(new errors_1.AuthenticationError('API key is required but not provided'), 'Authentication error');
    }
    try {
        const response = await client.get(`api/users/${address}`, {
            headers: {
                'Content-Type': 'application/json',
                'X-API-KEY': apiKey,
            },
        });
        return { success: true, data: response };
    }
    catch (error) {
        console.error('Error fetching user data:', error);
        const httpStatusCode = (0, errors_1.extractHttpStatusCode)(error);
        const errorCode = (0, errors_1.determineErrorCode)(error, httpStatusCode);
        if (error instanceof Error) {
            if (error.message.includes('network') || error.message.includes('timeout')) {
                return (0, errors_1.createErrorResponse)(new errors_1.NetworkError('Network error while fetching user data', { originalError: error, address }, httpStatusCode), 'Network error');
            }
            else if (error.message.includes('404') || error.message.includes('not found')) {
                return (0, errors_1.createErrorResponse)(new errors_1.ValidationError('address', 'User not found', { originalError: error, address }, 404), 'Validation error');
            }
            else if (error.message.includes('401') || error.message.includes('unauthorized')) {
                return (0, errors_1.createErrorResponse)(new errors_1.AuthenticationError('Unauthorized access to user data', { originalError: error, address }, 401), 'Authentication error');
            }
            else if (error.message.includes('API') || error.message.includes('response')) {
                return (0, errors_1.createErrorResponse)(new errors_1.ApiError('API error while fetching user data', { originalError: error, address }, httpStatusCode), 'API error');
            }
        }
        return (0, errors_1.createErrorResponse)(error, 'Failed to fetch user data');
    }
};
exports.getUserData = getUserData;
