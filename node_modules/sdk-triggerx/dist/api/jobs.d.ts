import { TriggerXClient } from '../client';
import { TimeBasedJobInput, EventBasedJobInput, ConditionBasedJobInput, CreateJobData, JobResponse } from '../types';
import { Signer } from 'ethers';
export declare function toCreateJobDataFromTime(input: TimeBasedJobInput, balances: {
    etherBalance: bigint;
    tokenBalanceWei: bigint;
}, userAddress: string, jobCostPrediction: number): CreateJobData;
export declare function toCreateJobDataFromEvent(input: EventBasedJobInput, balances: {
    etherBalance: bigint;
    tokenBalanceWei: bigint;
}, userAddress: string, jobCostPrediction: number): CreateJobData;
export declare function toCreateJobDataFromCondition(input: ConditionBasedJobInput, balances: {
    etherBalance: bigint;
    tokenBalanceWei: bigint;
}, userAddress: string, jobCostPrediction: number): CreateJobData;
export interface CreateJobParams {
    jobInput: TimeBasedJobInput | EventBasedJobInput | ConditionBasedJobInput;
    signer: Signer;
    encodedData?: string;
}
/**
 * Create a job on the blockchain.
 * @param client TriggerXClient instance
 * @param params Parameters for creating the job
 * @returns JobResponse containing the result of the job creation
 */
export declare function createJob(client: TriggerXClient, params: CreateJobParams): Promise<JobResponse>;
