"use strict";
// sdk-triggerx/src/api/deleteJob.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteJob = void 0;
const JobRegistry_json_1 = __importDefault(require("../contracts/abi/JobRegistry.json"));
const JobRegistry_1 = require("../contracts/JobRegistry");
const config_1 = require("../config");
const errors_1 = require("../utils/errors");
const deleteJob = async (client, jobId, signer, chainId) => {
    // Validate inputs
    if (!jobId || typeof jobId !== 'string') {
        return (0, errors_1.createErrorResponse)(new errors_1.ValidationError('jobId', 'Job ID is required and must be a string'), 'Validation error');
    }
    if (!chainId || typeof chainId !== 'string') {
        return (0, errors_1.createErrorResponse)(new errors_1.ValidationError('chainId', 'Chain ID is required and must be a string'), 'Validation error');
    }
    const apiKey = client.getApiKey();
    if (!apiKey) {
        return (0, errors_1.createErrorResponse)(new errors_1.AuthenticationError('API key is required but not provided'), 'Authentication error');
    }
    const { jobRegistry: jobRegistryAddress } = config_1.CONTRACT_ADDRESSES_BY_CHAIN[chainId];
    if (!jobRegistryAddress) {
        return (0, errors_1.createErrorResponse)(new errors_1.ConfigurationError(`No contract address found for chain ID: ${chainId}`), 'Configuration error');
    }
    try {
        console.log(`Deleting job ${jobId} on chain ${chainId}...`);
        // First delete on-chain
        await (0, JobRegistry_1.deleteJobOnChain)({
            jobId,
            contractAddress: jobRegistryAddress,
            abi: JobRegistry_json_1.default,
            signer,
        });
        console.log('On-chain deletion successful, updating API...');
        // Then update the API
        await client.put(`api/jobs/delete/${jobId}`, {}, {
            headers: {
                'Content-Type': 'application/json',
                'X-API-KEY': apiKey,
            },
            timeout: 30000, // 30 second timeout
        });
        console.log('API update successful');
        return { success: true };
    }
    catch (error) {
        console.error('Error deleting job:', error);
        // Determine error type based on the error
        const httpStatusCode = (0, errors_1.extractHttpStatusCode)(error);
        const errorCode = (0, errors_1.determineErrorCode)(error, httpStatusCode);
        if (error instanceof Error) {
            if (error.message.includes('network') || error.message.includes('timeout')) {
                return (0, errors_1.createErrorResponse)(new errors_1.NetworkError('Network error during job deletion', { originalError: error, jobId, chainId }, httpStatusCode), 'Network error');
            }
            else if (error.message.includes('contract') || error.message.includes('transaction')) {
                return (0, errors_1.createErrorResponse)(new errors_1.ContractError('Contract error during job deletion', { originalError: error, jobId, chainId }, httpStatusCode), 'Contract error');
            }
            else if (error.message.includes('API') || error.message.includes('response')) {
                return (0, errors_1.createErrorResponse)(new errors_1.ApiError('API error during job deletion', { originalError: error, jobId, chainId }, httpStatusCode), 'API error');
            }
        }
        return (0, errors_1.createErrorResponse)(error, 'Failed to delete job');
    }
};
exports.deleteJob = deleteJob;
