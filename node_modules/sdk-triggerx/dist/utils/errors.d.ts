import { ApiErrorCode, HttpStatusCode } from '../types';
export declare class TriggerXError extends Error {
    readonly errorCode: ApiErrorCode;
    readonly httpStatusCode?: HttpStatusCode;
    readonly errorType: 'VALIDATION_ERROR' | 'NETWORK_ERROR' | 'AUTHENTICATION_ERROR' | 'CONTRACT_ERROR' | 'API_ERROR' | 'BALANCE_ERROR' | 'CONFIGURATION_ERROR' | 'UNKNOWN_ERROR';
    readonly details?: any;
    constructor(message: string, errorCode: ApiErrorCode, errorType: 'VALIDATION_ERROR' | 'NETWORK_ERROR' | 'AUTHENTICATION_ERROR' | 'CONTRACT_ERROR' | 'API_ERROR' | 'BALANCE_ERROR' | 'CONFIGURATION_ERROR' | 'UNKNOWN_ERROR', details?: any, httpStatusCode?: HttpStatusCode);
}
export declare const HTTP_STATUS_TO_ERROR_CODE: Record<HttpStatusCode, ApiErrorCode>;
export declare const ERROR_PATTERN_TO_CODE: Record<string, ApiErrorCode>;
export declare function wrapError(error: unknown): TriggerXError;
export declare function extractHttpStatusCode(error: any): HttpStatusCode | undefined;
export declare function determineErrorCode(error: any, httpStatusCode?: HttpStatusCode): ApiErrorCode;
export declare class ValidationError extends TriggerXError {
    readonly field: string;
    constructor(field: string, message: string, details?: any, httpStatusCode?: HttpStatusCode);
}
export declare class NetworkError extends TriggerXError {
    constructor(message: string, details?: any, httpStatusCode?: HttpStatusCode);
}
export declare class AuthenticationError extends TriggerXError {
    constructor(message: string, details?: any, httpStatusCode?: HttpStatusCode);
}
export declare class ContractError extends TriggerXError {
    constructor(message: string, details?: any, httpStatusCode?: HttpStatusCode);
}
export declare class ApiError extends TriggerXError {
    constructor(message: string, details?: any, httpStatusCode?: HttpStatusCode);
}
export declare class BalanceError extends TriggerXError {
    constructor(message: string, details?: any, httpStatusCode?: HttpStatusCode);
}
export declare class ConfigurationError extends TriggerXError {
    constructor(message: string, details?: any, httpStatusCode?: HttpStatusCode);
}
export declare function createErrorResponse(error: TriggerXError | Error | unknown, fallbackMessage?: string): {
    success: false;
    error: string;
    errorCode: ApiErrorCode;
    httpStatusCode?: HttpStatusCode;
    errorType: 'VALIDATION_ERROR' | 'NETWORK_ERROR' | 'AUTHENTICATION_ERROR' | 'CONTRACT_ERROR' | 'API_ERROR' | 'BALANCE_ERROR' | 'CONFIGURATION_ERROR' | 'UNKNOWN_ERROR';
    details?: any;
};
